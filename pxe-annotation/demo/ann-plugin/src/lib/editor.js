// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me) { return function() { return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
Annotator.Editor = (function(_super) {
  __extends(Editor, _super);

  Editor.prototype.events = {
    'form submit': 'submit',
    '.annotator-save click': 'submit',
    '.annotator-cancel click': 'hide',
    '.annotator-cancel mouseover': 'onCancelButtonMouseover',
    'textarea keydown': 'processKeypress',
    '.annotator-color click':'onColorChange',
    '.annotator-share click':'onShareClick',
    '.annotator-confirm-delete click':'onDeleteClick',
    '.annotator-edit-container click':'onEditClick',
    '.annotator-listing textarea keyup':'onNoteChange',
    '.annotator-delete-container click':'onDeleteIconClick',
    '.annotator-confirm-cancel click':'onCancelClick',
    '.annotator-color-select-container click': 'onAnnotatorColorChange',
    '.annotator-edit-Note-Panel-1-rect click' : 'onEditRectClick',
    '.annotator-edit-Note-Panel-1-circle click' : 'onEditColorChange',
    '#noteContainer click' : 'onNoteContainerClick',
    '.annotator-select-rect,.annotator-confirm-cancel,.annotator-edit-Note-Panel-1-rect,.annotator-edit-Note-Panel-1-circle,#noteContainer keyup': 'onKeyupClick',
    '.annotator-delete-container keydown':'ondeleteKeydownEvent',
    '.annotator-select-outer-circle keydown': 'oncircleKeydownEvent',
    '.annotator-edit-Note-Panel-1-circle,.annotator-edit-Note-Panel-1-rect,.annotator-select-outer-circle,.annotator-confirm-cancel keydown' : 'onkeydownSelection',
    '.goto-button,.annotator-confirm-delete keydown':'ongotoDeleteKeydownEvent'
  };

  Editor.prototype.classes = {
    hide: 'annotator-hide',
    focus: 'annotator-focus'
  };
  
  Editor.prototype.isShareable=null;
  Editor.prototype.textareaHeight=null;
  Editor.prototype.currentAnnotation=null;
  Editor.prototype.const={
    characters :3000
  }
  var language = window.annotationLocale || 'en-US';
  var panel1 = '<div class="annotator-panel-1 annotator-panel-triangle"> \
                  <div class="annotator-color-container">\
                    <div> \
                      <div class = "annotator-color-select-container yellowColorBtn" title = "Main ideas" value="#55DF49"> \
                        <div class = "annotator-select-outer-circle positionAbs" tabindex="1" aria-label="'+locale_data[language]["mainIdeas"]+'"> \
                          <div class = "annotator-select-inner-circle hide" value="#55DF49"></div> \
                        </div> \
                        <div class = "annotator-select-rect positionRel annotator-Rect-Pos annotator-pane1-font annotator-pane1-rect-background-green">' +locale_data[language]['mainIdeas']+'</div> \
                      </div> \
                      <div class = "annotator-color-select-container" title = "Questions" value="#FFD232"> \
                        <div class = "annotator-select-outer-circle positionAbs" tabindex="2" aria-label="'+locale_data[language]["questions"]+'"> \
                          <div class = "annotator-select-inner-circle hide" value="#FFD232"></div> \
                        </div> \
                        <div class = "annotator-select-rect positionRel annotator-Rect-Pos annotator-pane1-font annotator-pane1-rect-background-sepia">' +locale_data[language]['questions']+'</div> \
                      </div> \
                      <div class = "annotator-color-select-container" title = "Observations" value="#FC92CF"> \
                        <div class = "annotator-select-outer-circle positionAbs" tabindex="3" aria-label="'+locale_data[language]["observations"]+'"> \
                          <div class = "annotator-select-inner-circle hide" value="#FC92CF"></div> \
                        </div> \
                        <div class = "annotator-select-rect positionRel annotator-Rect-Pos annotator-pane1-font annotator-pane1-rect-background-pink">' +locale_data[language]['observations']+'</div> \
                      </div> \
                    </div> \
                  </div> \
                  <div class = "annotator-select-container"> \
                    <div> \
                      <!-- div class="annotator-delete-container" title="' + locale_data[language]['delete'] + '"></div --> \
                      <!-- div class="annotator-edit-container" title="' + locale_data[language]['edit'] + '"></div --> \
                    </div> \
                  </div> \
                  <div class = "edit-Note-Panel-1">  <!-- Edit Note Panel-->\
                    <div> <!-- Edit Note circle-->\
                      <div class = "edit-note-circle"> \
                        <div class= "annotator-edit-Note-Panel-1-circle annotator-edit-Note-Panel-1-circle-green" tabindex="1" value="#55DF49" aria-label="'+locale_data[language]["mainIdeas"]+'"> \
                        </div> \
                        <div class= "annotator-edit-Note-Panel-1-circle annotator-edit-Note-Panel-1-circle-sepia" tabindex="2" value="#FFD232" aria-label="'+locale_data[language]["questions"]+'"> \
                        </div > \
                        <div class= "annotator-edit-Note-Panel-1-circle annotator-edit-Note-Panel-1-circle-pink" tabindex="3" value="#FC92CF" aria-label="'+locale_data[language]["observations"]+'"> \
                        </div > \
                      </div> \
                      <div class = "edit-note-rect"> <!-- Edit Note Rectangle-->\
                        <div> \
                          <div class = "annotator-select-rect hide annotator-pane1-font annotator-pane1-rect-background-green annotator-edit-Note-Panel-1-rect" tabindex="0" value="#55DF49" aria-label="'+locale_data[language]["mainIdeas"]+'">' +locale_data[language]['mainIdeas']+'</div> \
                        </div> \
                                \
                        <div> \
                          <div class = "annotator-select-rect hide annotator-pane1-font annotator-pane1-rect-background-sepia annotator-edit-Note-Panel-1-rect" tabindex="0" value="#FFD232" aria-label="'+locale_data[language]["questions"]+'">' +locale_data[language]['questions']+'</div> \
                        </div> \
                                \
                        <div> \
                          <div class = "annotator-select-rect hide annotator-pane1-font annotator-pane1-rect-background-pink annotator-edit-Note-Panel-1-rect" tabindex="0" value="#FC92CF" aria-label="'+locale_data[language]["observations"]+'">' +locale_data[language]['observations']+'</div> \
                        </div> \
                        <div> \
                          <div class = "annotator-select-rect hide annotator-pane1-font annotator-pane1-rect-background-blue annotator-edit-Note-Panel-1-rect" tabindex="0" value="#ccf5fd" aria-label="'+locale_data[language]["instructor"]+'">' +locale_data[language]['instructor']+'</div>\
                        </div> \
                      </div> \
                              \
                    </div> \
                  </div> \
                </div>'

  var panel2 ='<div class="annotator-panel-2"><ul class="annotator-listing"></ul></div>';

  var panel3 ='<div class="annotator-panel-3"> \
                <div class="annotator-controls"> \
                  <div class="annotator-delete-container" tabindex="0" title="' + locale_data[language]['delete'] + '" aria-label="'+locale_data[language]["delete"]+'"> \
                  </div> \
                  <a href="'+window.parent.window.iseUrl+'" target="_blank" class="goto-button" tabindex="0" title="Go to Notebook" aria-label="Go to Notebook"></a> \
                  <div class="ann-cancel-delete-confirm-section hide"> \
                    <div class="ann-confirm-section"> \
                      <label class="annotator-confirm" tabindex="0" aria-label="'+locale_data[language]["confirm"]+'">' + locale_data[language]['confirm'] + '?</label> \
                    </div> \
                    <div class = "ann-canceldelete-section"> \
                      <a class="annotator-confirm-cancel" tabindex="0" title="' + locale_data[language]['cancel'] + '" aria-label="'+locale_data[language]["cancel"]+'">' + locale_data[language]['cancel'] + '</a> \
                      <a class="annotator-confirm-delete" tabindex="0" title="' + locale_data[language]['delete'] + '" aria-label="'+locale_data[language]["delete"]+'">' + locale_data[language]['delete'] + '</a> \
                    </div> \
                  </div> \
                  <!--div class="ann-share-section"> \
                    <label class="annotator-share-text">' + locale_data[language]['share'] + '</label> \
                      <div class="annotator-share" title="' + locale_data[language]['share'] + '"> \
                      </div> \
                  </div --> \
                  <div class="ann-cancelsave-section"> \
                    <!-- a class="annotator-cancel" title="' + locale_data[language]['cancel'] + '">' + locale_data[language]['cancel'] + '</a > \
                    <a class="annotator-save annotator-focus" title="' + locale_data[language]['save'] + '">' + locale_data[language]['save'] + '</a --> \
                  </div> \
                </div> \
              </div>'; 

  var panel4 ='<div class="annotator-panel-4 annotator-panel-triangle"><div class="ann-confirm-section"><label class="annotator-confirm">' + locale_data[language]['confirm'] + '?</label></div><div class="ann-canceldelete-section"><a class="annotator-confirm-delete" title="' + locale_data[language]['delete'] + '">' + locale_data[language]['delete'] + '</a><a class="annotator-confirm-cancel" title="' + locale_data[language]['cancel'] + '">' + locale_data[language]['cancel'] + '</a></div></div></div>';

  var panel5 ='<li style="display:none"; class="characters-left"><span id="letter-count">'+(Editor.prototype.const.characters)+'</span id="letter-text">  ' + locale_data[language]['charleft'] + '<span><span></li>';

  Editor.prototype.html = '<div class="annotator-outer annotator-editor hide-note"><form class="annotator-widget">'+panel1+ panel2+panel3+'</form></div>';
  
  Editor.prototype.options = {};

  Editor.prototype.randomId = 0;

  function Editor(options) {
    this.onCancelButtonMouseover = __bind(this.onCancelButtonMouseover, this);
    this.processKeypress = __bind(this.processKeypress, this);
    this.submit = __bind(this.submit, this);
    this.load = __bind(this.load, this);
    this.hide = __bind(this.hide, this);
    this.show = __bind(this.show, this);
    this.onColorChange=__bind(this.onColorChange, this);
    this.onShareClick=__bind(this.onShareClick, this);
    this.onDeleteClick=__bind(this.onDeleteClick, this);
    this.onDeleteIconClick=__bind(this.onDeleteIconClick, this);
    this.onCancelClick=__bind(this.onCancelClick, this);
    this.onEditClick=__bind(this.onEditClick, this);
    this.onNoteChange=__bind(this.onNoteChange, this);
    this.ondeleteKeydownEvent=__bind(this.ondeleteKeydownEvent, this);
    this.ongotoDeleteKeydownEvent=__bind(this.ongotoDeleteKeydownEvent, this);
    Editor.__super__.constructor.call(this, $(this.html)[0], options);
    this.fields = [];
    this.annotation = {};
  }

  Editor.prototype.onAnnotatorColorChange = function(e) {
    var title = '';
    var dom;
    if(isDisableAnnotation)
      return;
    if(e.target.parentElement.getAttribute('title')) {
      title = e.target.parentElement.getAttribute('title')
      dom = e.target.parentElement;
    } else if(e.target.getAttribute('title')) {
      title = e.target.getAttribute('title')
      dom = e.target;
    }
    $('.annotator-select-inner-circle').hide();
    $('.annotator-select-outer-circle').removeClass('circleborder');
    $(dom).find('.annotator-select-inner-circle').show();
    $(dom).find('.annotator-select-outer-circle').addClass('circleborder');

    $('.ann-cancel-delete-confirm-section').hide();
    $('.annotator-delete-container').show()

    this.onColorChange(dom);
  }

  Editor.prototype.onNoteContainerClick= function(e) { 
    if ($('.annotator-widget').hasClass("instructorNote") || $('.annotator-widget').hasClass("disableAnnotation"))
      return;
    $("#noteContainer").hide();
    var annotator_editor = $('.annotator-editor')
    annotator_editor.css({ top : annotator_editor.position().top});
    $('.annotator-panel-2').find('textarea').show().css({"pointer-events": "all", "opacity": "1"});
    $('.annotator-delete-container,.goto-button,.annotator-confirm,.annotator-confirm-cancel,.annotator-confirm-delete').attr('tabindex', 0);
    $('.annotator-panel-2').find('textarea').focus();
    $(".annotator-panel-triangle").addClass("annotator-panel-triangle1").removeClass("annotator-panel-triangle");
  }

  Editor.prototype.onKeyupClick= function(e) { 
    var keycode = e.keyCode;
    if((keycode == 13 || keycode == 32) && !isDisableAnnotation) {
      $(e.target).trigger('click');
    } else if(e.target.id && e.target.id === "noteContainer" && e.keyCode === 9){
      e.target.focus();
    }
  }

  Editor.prototype.onkeydownSelection = function(event) {
    if (event.keyCode == 32) 
      event.preventDefault();
  }

  Editor.prototype.ondeleteKeydownEvent= function(e) {
    //e.preventDefault();
    var keycode = e.keyCode;
    var self = this;
    if((keycode == 13 || keycode == 32) && !isDisableAnnotation) {
      $('.goto-button').removeClass('hide');
      $(e.target).trigger('click');
    } 
  }

  Editor.prototype.ongotoDeleteKeydownEvent= function(e) {
    var keycode = e.keyCode;
    var self = this;
    if(keycode == 9 && !e.shiftKey) {
      setTimeout(function() {
          if($('.edit-note-circle').css('display') == 'block' && $('.edit-Note-Panel-1').css('display') == 'inline-block') {
            $('.annotator-edit-Note-Panel-1-circle')[0].focus();
          } else {
            var isEditpanel = $('.annotator-edit-Note-Panel-1-rect[value="'+self.annotation.colorCode+'"]');
            if(isEditpanel.css('display') == 'block' && $('.edit-Note-Panel-1').css('display') != 'none') {
              isEditpanel.focus(); 
            } else {
              $('.annotator-select-outer-circle')[0].focus();
            }
          }
        }, 25); 
    }
    if(keycode == 32) {
      $(e.target).trigger('click');
    } 
  }
  
  Editor.prototype.oncircleKeydownEvent= function(e) {
    var keycode = e.keyCode;
    if(keycode == 9) {
      setTimeout(function() {
        if ($(e.target).closest('.annotator-color-select-container').attr('value') == '#FC92CF') {
          if($('.ann-cancel-delete-confirm-section').css('display') != 'block' && $('.annotator-outer').hasClass('hide-note')) {
            $('.annotator-select-outer-circle')[0].focus();
          } else {
            $('.annotator-delete-container,.goto-button,.annotator-confirm,.annotator-confirm-cancel,.annotator-confirm-delete').attr('tabindex', 0);
            $('#annotator-field-0').focus();
          }
        }
    }, 25);
  }
    if((keycode == 13 || keycode == 32) && !isDisableAnnotation) {
      $(e.target).trigger('click');
    } 
  }

  Editor.prototype.onEditColorChange= function(e) { 
    e.preventDefault();
    var editNoteCircleDom = $(".edit-note-circle");
    var value = $(e.target).attr('value');
    editNoteCircleDom.find('.annotator-edit-Note-Panel-1-circle').css({"border": "0px","height": "18px", "width": "18px"});
    editNoteCircleDom.find(("[value=" + "'" + value + "']")).css({ "border": "solid 1px #19a6a4","height": "20px", "width": "20px"});

    $('.annotator-edit-Note-Panel-1-rect').hide();
    $('.edit-note-rect').find(("[value=" + "'" + value + "']")).show();
    this.onColorChange(e.target);
  }

  Editor.prototype.onEditRectClick = function(e) { 
    var editNoteCircleDom = $(".edit-note-circle");
    var value = $(e.target).attr('value');
    editNoteCircleDom.show();
    editNoteCircleDom.find('.annotator-edit-Note-Panel-1-circle').css({"border": "0px","height": "18px", "width": "18px"}); // reset to default circle
    editNoteCircleDom.find(("[value=" + "'" + value + "']")).css({ "border": "solid 1px #19a6a4","height": "20px", "width": "20px"}).focus(); // highlight the selected circle
    $(".edit-note-rect").css({"padding" : "0px","margin-top": "-43px","margin-left": "99px"});
    $("#noteContainer").attr("tabindex", "4");
    $('.annotator-delete-container,.goto-button,.annotator-confirm,.annotator-confirm-cancel,.annotator-confirm-delete').attr('tabindex', 5);
    if(value === "#55DF49") { // Green

    } else if(value ==="#FFD232") { // Sepia

    } else { // pink

    }
    //$(e.target).attr('value')
  }
  
  Editor.prototype.unShareAnnotation=function() {
     this.annotation.colorCode=this.annotation.lastColor;
     if(this.annotation.colorCode == '#FFD232' || this.annotation.colorCode == '#FFEDAD' ) { //Yellow
         annBgColor = 'rgba(255,210,50,0.4)';
     } else if (this.annotation.colorCode == '#55DF49' || this.annotation.colorCode == '#BBF2B6') { //Green
         annBgColor = '#bbf2b6';
     } else if (this.annotation.colorCode == '#FC92CF' || this.annotation.colorCode == '#FED3EC') { //Pink
         annBgColor = '#fed3ec';
     } 
     this.annotation.shareable=false;
     $(this.annotation.highlights).css('background', annBgColor);
     $('.annotator-color').removeClass('active');
     $('.annotator-color[value="'+this.annotation.colorCode+'"]').addClass('active');
     $('.annotator-color-container').removeClass('disabled-save');
     $(this.annotation.highlights).removeClass('sharedNote');
  }
  Editor.prototype.onShareClick=function(event) {
    var that=this;
    this.fromOnShare=true;
    if ($(event.target).hasClass('on')) {
      $(event.target).removeClass('on');
      this.unShareAnnotation();
    }
    else {
      $(event.target).addClass('on');
      this.annotation.colorCode='#ccf5fd';
      this.annotation.shareable=true;
      $('.annotator-color').removeClass('active');
      $(this.annotation.highlights).css('background', '#ccf5fd');
      $(this.annotation.highlights).addClass('sharedNote');
      $('.annotator-color-container').addClass('disabled-save');
    }
    setTimeout(function(){ that.submit(); }, 800);    
  }
  
  Editor.prototype.onDeleteClick=function(event) {  
    this.element.addClass(this.classes.hide);
    var panel1Sec =  this.element.find('.annotator-panel-1'), panel2Sec =  this.element.find('.annotator-panel-2'), panel3Sec =  this.element.find('.annotator-panel-3'), panel4Sec = this.element.find('.annotator-panel-4') ;
    panel1Sec.removeClass('hide-popup');
    panel2Sec.removeClass('overlay');
    panel3Sec.removeClass('overlay');
    panel4Sec.remove();
    this.element.addClass('hide-note')
    return $('.annotator-outer.annotator-viewer').triggerHandler.apply($('.annotator-outer.annotator-viewer'), ['delete', [this.annotation]]);
  }
  Editor.prototype.onDeleteIconClick=function(event) {
    event.stopImmediatePropagation(); 
    setTimeout(function() {
      $(event.target).hide(); 
      $('.ann-cancel-delete-confirm-section').removeClass('hide').css({"display": "block"});
      $('.annotator-confirm').focus(); 
    }, 50);
    $('.goto-button').addClass('hide');
    /*var panel1Sec =  this.element.find('.annotator-panel-1'), panel2Sec =  this.element.find('.annotator-panel-2'), panel3Sec =  this.element.find('.annotator-panel-3'), panel4Sec = this.element.find('.annotator-panel-4');
    if($(panel2Sec).find('textarea').val().trim()) {
        panel1Sec.addClass('hide-popup').after(panel4);
        panel4Sec.addClass('annotator-panel-triangle');
        panel2Sec.addClass('overlay');
        panel3Sec.addClass('overlay');
        $(panel2Sec).find('textarea').attr('readonly','readonly');
    }
    else {
        this.onDeleteClick(event);
    }*/
  }
  Editor.prototype.onCancelClick=function(event) {  
    var panel1Sec =  this.element.find('.annotator-panel-1'), panel2Sec =  this.element.find('.annotator-panel-2'), panel3Sec =  this.element.find('.annotator-panel-3'), panel4Sec = this.element.find('.annotator-panel-4') ;
    panel1Sec.removeClass('hide-popup');
    panel2Sec.removeClass('overlay');
    panel3Sec.removeClass('overlay');
    panel4Sec.remove();
    $(".ann-cancel-delete-confirm-section").hide();
    $(".annotator-delete-container").show();
    $(panel2Sec).find('#noteContainer').focus();
    $(panel2Sec).find('textarea').removeAttr('readonly').focus();
    $('.goto-button').removeClass('hide');
  }

  Editor.prototype.onEditClick=function(event) {  
    this.element.addClass('show-edit-options');
    $(this.element).find('textarea').show();
    $(this.element).find('#noteContainer').hide();
    this.element.find('textarea').css({'pointer-events':'all', 'opacity':'1','min-height':'40px'});
    this.element.find('input').css({'pointer-events':'all', 'opacity':'1'});
    $(this.element).find('.annotator-color-container').removeClass('disabled-save');
  }
  
  Editor.prototype.onNoteChange=function(event) {
    this.element.addClass('show-edit-options');
    if(!event.target.value.length){
      $(this.element).find('.annotator-share-text, .annotator-share').hide();
    }
    var inputCharLength = event.currentTarget.value.length, actualChar = this.const.characters;
    var remainingCount = actualChar-inputCharLength;
    this.element.find('#letter-count').text((remainingCount>0 && remainingCount<51) ? '-'+remainingCount : remainingCount);
    $('.characters-left').css('display', (remainingCount < 51)?'block':'none');
    var selectors = this.element.find('.annotator-item textarea'); 
    var temp = selectors.height();
    this.textareaHeight = $('#annotator-field-'+this.randomId)[0].scrollHeight;
    if(temp!==this.textareaHeight) {
      var topPosition = $('.annotator-editor').css('top');
      this.element.css({top:topPosition});
    }    
  }

  Editor.prototype.onColorChange=function(target) {
   window.getSelection().removeAllRanges();
   this.element.removeClass('hide-note');
   var checkoverlap = $('.annotator-editor').hasClass('overlapingpopup');
   var isTopAlign=(!this.annotation.colorCode)?true:false;
   if(window.currAnn) {
    ($('#noteContainer').css('display') == 'block') ? $('.annotator-edit-container').show() : $('.annotator-edit-container').hide();
    $('.annotator-outer.annotator-viewer').triggerHandler.apply($('.annotator-outer.annotator-viewer'), ['delete', [window.currAnn]]);
   }
   if (this.annotation._id===undefined && this.currentAnnotation !== null) {     
    var curAnn =this.currentAnnotation;   
    Object.assign(this.annotation, curAnn);   
   }
   var colorCode = target.getAttribute('value');
   this.annotation.colorCode=this.annotation.lastColor=colorCode;
   /*$('.annotator-color').removeClass('active');
   $(event.target).addClass('active');*/
   if($(this.annotation.highlights).closest('.pxereaderSearchHighlight').length>0) {
    $(this.annotation.highlights).unwrap('.pxereaderSearchHighlight');
    $(this.annotation.highlights).parents().removeClass('pxereaderSearchHighlight');
    $(this.annotation.highlights).find('.annotator-handle').css('background-color', 'inherit');
   }
   var annBgColor = '', noteIconBgColor = '', noteText = '';
   if(colorCode == '#FFD232' || colorCode == '#FFEDAD') { //Yellow
      annBgColor = 'rgba(255,210,50,0.4)';
      noteIconBgColor = '#ffedad';
      noteText = 'Q';
   } else if (colorCode == '#55DF49' || colorCode == '#BBF2B6') { //Green
      annBgColor = noteIconBgColor = '#bbf2b6';
      noteText = 'M';
   } else if (colorCode == '#FC92CF' || colorCode == '#FED3EC') { //Pink
      annBgColor = noteIconBgColor = '#fed3ec';
      noteText = 'O';
   } else if (colorCode == '#ccf5fd') { //Share(Blue)
      annBgColor = noteIconBgColor = '#ccf5fd';
      noteText = 'I';
   } else { 
      annBgColor = noteIconBgColor = colorCode;
   }
   $(this.annotation.highlights).each(function() {
      if ($(this).parent().attr('shareable') == 'true') {
        $(this).css('background', 'inherit')
      } else {
        $(this).css('background', annBgColor);
      }
   });
   $(this.annotation.highlights).find('.annotator-handle').text(noteText).css('background-color', noteIconBgColor);  if (isTopAlign) {
      var topPosition=this.element.position().top + this.element.find('form').height()-this.element.find('.annotator-panel-1').height()-20;
      this.element.css({top:topPosition});
    }
    if (this.annotation.shareable) {
      $('.annotator-share').removeClass('on');
      this.unShareAnnotation();
    }
    if(checkoverlap) {
      $('#noteContainer').css('display', 'none');
      $('#annotator-field-0').css({'display':'inline-block', 'pointer-events': 'all','opacity': '1'});
      $('.annotator-edit-container').hide();
    }
    var annText = this.annotation.text;
    if(annText && $('#noteContainer').css('display') == 'block') {
      $('#noteContainer').attr('tabindex', 4);
      $('.annotator-delete-container,.goto-button,.annotator-confirm,.annotator-confirm-cancel,.annotator-confirm-delete').attr('tabindex', 5);
    } else {
      $('.annotator-delete-container,.goto-button,.annotator-confirm,.annotator-confirm-cancel,.annotator-confirm-delete,#noteContainer,#annotator-field-0').attr('tabindex', 0);
    }
    setTimeout(function() { $('#annotator-field-0').focus(); })  // To enable focus on textarea
    // this.publish('save', [this.annotation]);
    // if(isTopAlign)
    //    $('.annotator-outer.annotator-viewer').triggerHandler.apply($('.annotator-outer.annotator-viewer'), ['delete', [this.annotation]]);
  }

  Editor.prototype.show = function(event, topPos) {
    Annotator.Util.preventEventDefault(event);
    this.element.removeClass(this.classes.hide);
    $(this.annotation.highlights).removeClass('current-annotation');
    if (!this.annotation.text || !this.annotation.text.length) $('.annotator-edit-container').hide();
    this.annotation.colorCode=this.annotation.colorCode||'';
    this.annotation.shareable=(this.annotation.shareable===undefined)?false:this.annotation.shareable;
    if (this.annotation.colorCode||this.annotation.shareable) {
      this.element.removeClass('hide-note');
      var textareaScroll =this.element.find('textarea').prop('offsetHeight') || 40,calPos,actualPos,oldHeight;
      oldHeight=this.element.find('textarea').height();
      this.element.find('textarea').height(textareaScroll);
      actualPos = this.element.position().top;
      if( this.element.find('textarea').val().length === 0 )
        textareaScroll = textareaScroll - $(this.element).find('#noteContainer').height();
      if(!(this.element.find('#mathTitle').css('display') === 'none'))
        actualPos = actualPos + 27;
      pos  = (textareaScroll-oldHeight) + actualPos;
      this.element.css({top:pos});
    } 
    if (this.annotation.shareable) {
      $('.annotator-share').addClass('on');
      $('.annotator-color-container').addClass('disabled-save');
      if (!this.isShareable)
        $('.annotator-panel-1').addClass('disabled-save');
    }
    else {
      $('.annotator-share').removeClass('on');
      $('.annotator-color-container').removeClass('disabled-save');
    }
    /*$('.annotator-color').removeClass('active');
    $('.annotator-color[value="'+this.annotation.colorCode+'"]').addClass('active');*/
    $('.annotator-select-inner-circle').hide(); // To hide all inner checkboxes
    $('.annotator-select-outer-circle').removeClass('circleborder');
    if (this.annotation.id && !$.trim(this.annotation.text).length) {
      this.element.find('.annotator-widget').addClass('emptyNote');
    } else {
      this.element.find('.annotator-widget').removeClass('emptyNote');
    }
    if(this.annotation.colorCode) { // For Edit container
      $('.annotator-color-select-container').hide(); 
      $('.edit-Note-Panel-1').show();
      $('.annotator-panel-1').css({height: "62px", position : "initial"});
      $(".edit-Note-Panel-1 .annotator-select-rect").hide();
      $(".edit-Note-Panel-1 .edit-note-circle").hide();
      $('.edit-Note-Panel-1').find("[value=" + this.annotation.colorCode + "]").show();
      $(".edit-note-rect").css({ "padding": "20px", "margin-top": "0px", "margin-left": "0px"});

      $('.ann-cancel-delete-confirm-section').hide();
      $('.annotator-delete-container').show();
      $('.annotator-panel-1').addClass('oldAnnotation');
      if(this.annotation.colorCode == '#ccf5fd') {
        this.element.find('.annotator-widget').addClass('instructorNote');
        //$('#noteContainer').css('pointer-events', 'none');
        $('.annotator-controls').hide();
        $('.annotator-editor').css({ top : topPos + $('.annotator-panel-1').height() + $('.annotator-panel-2 textarea').outerHeight(true)});
      } else {
        this.element.find('.annotator-widget').removeClass('instructorNote');
        $('#noteContainer').css('pointer-events', 'all');
        $('.annotator-controls').show();
        $('.annotator-editor').css({ top : topPos + $('.annotator-panel-1').height() + $('.annotator-panel-2 textarea').outerHeight(true) + $('.annotator-controls').height()});
      }
    } else { // Initial annotation
      $('.edit-Note-Panel-1').hide();
      $('.annotator-color-select-container').show();
      $('.annotator-panel-1').css({height: "110px", position : "relative"});
      $('.annotator-panel-1').removeClass('oldAnnotation');
      $('.annotator-editor').css({ top :$('.annotator-editor').position().top + $('.annotator-panel-1').height()});
    }
    this.element.find('.annotator-save').addClass(this.classes.focus);
    this.element.find('.annotator-listing .characters-left').remove();
    this.element.find('.annotator-listing').append(panel5);
    $('#letter-count').text(3000-this.element.find('textarea').val().length);
    this.checkOrientation();
    this.textareaHeight = $('#annotator-field-'+this.randomId)[0].scrollHeight || 22; 
    if(!$.trim(this.annotation.text) || !$.trim(this.annotation.text).length){
      this.element.find('textarea').css({'pointer-events':'all','opacity':'1'});
      this.element.find('input').css({'pointer-events':'all','opacity':'1'});
    }
    this.element.find(":input:first").focus();
    this.setupDraggables();
    if($.trim(this.element.find('textarea').val()).length > 0 && this.annotation.colorCode) {
      $(this.element).find('#noteContainer').html(linkifyStr(this.element.find('textarea').val()));
      $(this.element.find('textarea')).hide();
      $(this.element).find('#noteContainer').show();
    } else {
      $(this.element.find('textarea')).show();
      $(this.element).find('#noteContainer').hide();
    }
    $(".annotator-panel-triangle1").addClass("annotator-panel-triangle").removeClass("annotator-panel-triangle1");
    $('.annotator-delete-container,.goto-button,#noteContainer,#annotator-field-0,.annotator-confirm,.annotator-confirm-cancel,.annotator-confirm-delete').attr('tabindex', 0);
    if(this.annotation.colorCode) 
      (this.annotation.colorCode != '#ccf5fd') && $(".annotator-edit-Note-Panel-1-rect[value=" + "'" + this.annotation.colorCode + "']").focus();
    else
      $('.annotator-select-outer-circle')[0].focus();
    if(isDisableAnnotation) {
      this.element.find('.annotator-widget').addClass('disableAnnotation');
      this.element.find('.annotator-select-rect,.annotator-delete-container,#annotator-field-0').addClass('disable_element');
    } else {
      this.element.find('.annotator-widget').removeClass('disableAnnotation');
      this.element.find('.annotator-select-rect,.annotator-delete-container,#annotator-field-0').removeClass('disable_element');
    }
    return this.publish('show');
  };

  Editor.prototype.hide = function(event) {
   var annBgColor = '', noteIconBgColor = '', noteText = '', _i;
   if(this.annotation.colorCode == '#FFD232' || this.annotation.colorCode == '#FFEDAD') { //Yellow
       annBgColor = 'rgba(255,210,50,0.4)';
       noteIconBgColor = '#ffedad';
       noteText = 'Q';
   } else if (this.annotation.colorCode == '#55DF49' || this.annotation.colorCode == '#BBF2B6') { //Green
       annBgColor = noteIconBgColor = 'bbf2b6';
       noteText = 'M';
   } else if (this.annotation.colorCode == '#FC92CF' || this.annotation.colorCode == '#FED3EC') { //Pink
       annBgColor = noteIconBgColor = '#fed3ec';
       noteText = 'O'
   } else if (this.annotation.colorCode == '#ccf5fd') { //Share(Blue)
       annBgColor = noteIconBgColor = '#ccf5fd';
       noteText = 'I';
   } else {
       annBgColor = noteIconBgColor = this.annotation.colorCode;
   }
   var text = $('.annotator-panel-2').find('textarea').val();
   this.annotation.text = text;
   var noteVal = $.trim(this.annotation.text);
   var currentSelection = $(this.annotation.highlights); 
    for(_i=0; _i<currentSelection.length; _i++) {
      if($(currentSelection[_i]).find('.annotator-handle').length>0)
        break;
    }
    if(_i == currentSelection.length)
      $(currentSelection[0]).prepend("<span class='annotator-handle'></span>");
   $(this.annotation.highlights).each(function() {
      if ($(this).parent().attr('shareable') == 'true') {
        $(this).css('background', 'inherit')['addClass']('highlight-note');
      } else {
        $(this).css('background', annBgColor)['addClass']('highlight-note');
      }
   });
   $(this.annotation.highlights).find('.annotator-handle').each(function(i) {
      if(i == 0) {
        $(this).text(noteText).css('background-color', noteIconBgColor);
      }
   });
   Annotator.Util.preventEventDefault(event);
   this.element.addClass(this.classes.hide);
   this.element.addClass('hide-note').removeClass('show-edit-options');
   $('.annotator-edit-container').show();
   $('.annotator-panel-1').removeClass('disabled-save');
   this.onCancelClick();
   this.element.find('textarea').removeAttr('style');
   this.element.find('input').removeAttr('style'); 
   this.currentAnnotation = this.textareaHeight = null;
   if(this.annotation.colorCode && this.annotation.colorCode.length)
     this.publish('save', [this.annotation]);
   return this.publish('hide');
 };

  Editor.prototype.hasClass=function(element, className) {
    do {
      if (element.classList && element.classList.contains(className)) {
        return true;
      }
      element = element.parentNode;
    } while (element);
    return false;
  }
  Editor.prototype.load = function(annotation, isShareable, topPos, event) {
    this.isShareable=isShareable;
    if (!isShareable || (annotation && (!annotation.id || !annotation.text)))
      $('.annotator-share-text, .annotator-share').hide();
    else      
      $('.annotator-share-text, .annotator-share').show();
    if (!$('.annotator-item input').length) {
     $('.annotator-item').prepend('<input placeholder="' + locale_data[language]['addtitle'] + '." id = "mathTitle"/><div class="noteContainer" id = "noteContainer" tabindex="0"></div>');
    }
    $('.annotator-item input').val(annotation.quote);
    if(this.hasClass(annotation.highlights[0], 'MathJax')){
      $('.annotator-item input').show();
      if(!annotation.id){
          annotation.quote='';
          $('.annotator-item input').val('');
      }
    }else{
       $('.annotator-item input').hide()
    }
    var field, _i, _len, _ref;
    this.annotation = annotation;
    this.publish('load', [this.annotation]);
    _ref = this.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      field.load(field.element, this.annotation);
    }
    return this.show(event, topPos);
  };

  Editor.prototype.submit = function(event) {
    var field, _i, _len, _ref,currentSelection,count=0;
    Annotator.Util.preventEventDefault(event);
    if (this.fromOnShare) {
      this.fromOnShare=false
    }
    /*else if (this.annotation.shareable) {
      $('.annotator-share').removeClass('on');
      this.unShareAnnotation();
    }*/
    this.annotation.quote=$('.annotator-item input').val();
    var noteVal = $('#annotator-field-0').val();
    if (this.annotation.shareable) {
      if(!noteVal) {
        this.unShareAnnotation();
      }
    }
    _ref = this.fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      field.submit(field.element, this.annotation);
    }
    currentSelection = $(this.annotation.highlights); 
    for(_i=0; _i<currentSelection.length; _i++) {
      if($(currentSelection[_i]).find('.annotator-handle').length>0)
        break;
    }
    if (this.annotation.id) {
      this.annotation.updatedTimestamp = Date.parse(new Date().toISOString());
    }
    if(_i == currentSelection.length)
          $(currentSelection[0]).prepend("<span class='annotator-handle'></span>")
    $(this.annotation.highlights)[(this.element.find('textarea').val().length)?'addClass':'removeClass']('highlight-note');
    // this.publish('save', [this.annotation]);
    return this.hide();
  };

  Editor.prototype.addField = function(options) {
    var element, field, input;
    this.randomId = Annotator.Util.uuid();
    field = $.extend({
      id: 'annotator-field-' + this.randomId,
      type: 'input',
      label: '',
      load: function() {},
      submit: function() {}
    }, options);
    input = null;
    element = $('<li class="annotator-item" />');
    field.element = element[0];
    switch (field.type) {
    case 'textarea':
      input = $('<textarea maxlength="3000"/>');
      break;
    case 'input':
    case 'checkbox':
      input = $('<input />');
      break;
    case 'select':
      input = $('<select />');
    }
    element.append(input);
    input.attr({
      id: field.id,
      placeholder: field.label
    });
    if (field.type === 'checkbox') {
      input[0].type = 'checkbox';
      element.addClass('annotator-checkbox');
      element.append($('<label />', {
        'for': field.id,
        html: field.label
      }));
    }
    this.element.find('ul:first').append(element);
    this.fields.push(field);
    return field.element;
  };

  Editor.prototype.checkOrientation = function() {
    var controls, list, panel3;
    Editor.__super__.checkOrientation.apply(this, arguments);
    list = this.element.find('ul');
    panel3 = this.element.find('.annotator-panel-3');
    controls = this.element.find('.annotator-controls');
    if (this.element.hasClass(this.classes.invert.y)) {
      panel3.html(controls);
    } else if (controls.is(':first-child')) {
      panel3.html(controls);
    }
    return this;
  };

  Editor.prototype.processKeypress = function(event) {
    if (event.keyCode === 27) {
      return this.hide();
    } else if (event.keyCode === 13 && !event.shiftKey) {
      // return this.submit();
      event.stopPropagation();
    }
    $('.annotator-delete-container,.goto-button,.annotator-confirm,.annotator-confirm-cancel,.annotator-confirm-delete').attr('tabindex', 0);
  };

  Editor.prototype.onCancelButtonMouseover = function() {
    return this.element.find('.' + this.classes.focus).removeClass(this.classes.focus);
  };

  Editor.prototype.setupDraggables = function() {
    var classes, controls, cornerItem, editor, mousedown, onMousedown, onMousemove, onMouseup, resize, textarea, throttle;
    this.element.find('.annotator-resize').remove();
    if (this.element.hasClass(this.classes.invert.y)) {
      cornerItem = this.element.find('.annotator-item:last');
    } else {
      cornerItem = this.element.find('.annotator-item:first');
    }
    if (cornerItem) {
      $('<span class="annotator-resize"></span>').appendTo(cornerItem);
    }
    mousedown = null;
    classes = this.classes;
    editor = this.element;
    textarea = null;
    resize = editor.find('.annotator-resize');
    controls = editor.find('.annotator-controls');
    throttle = false;
    onMousedown = function(event) {
      if (event.target === this) {
        mousedown = {
          element: this,
          top: event.pageY,
          left: event.pageX
        };
        textarea = editor.find('textarea:first');
        $(window).bind({
          'mouseup.annotator-editor-resize': onMouseup,
          'mousemove.annotator-editor-resize': onMousemove
        });
        return event.preventDefault();
      }
    };
    onMouseup = function() {
      mousedown = null;
      return $(window).unbind('.annotator-editor-resize');
    };
    onMousemove = (function(_this) {
      return function(event) {
        var diff, directionX, directionY, height, width;
        if (mousedown && throttle === false) {
          diff = {
            top: event.pageY - mousedown.top,
            left: event.pageX - mousedown.left
          };
          if (mousedown.element === resize[0]) {
            height = textarea.height();
            width = textarea.width();
            directionX = editor.hasClass(classes.invert.x) ? -1 : 1;
            directionY = editor.hasClass(classes.invert.y) ? 1 : -1;
            textarea.height(height + (diff.top * directionY));
            textarea.width(width + (diff.left * directionX));
            if (textarea.height() !== height) {
              mousedown.top = event.pageY;
            }
            if (textarea.width() !== width) {
              mousedown.left = event.pageX;
            }
          } else if (mousedown.element === controls[0]) {
            editor.css({
              top: parseInt(editor.css('top'), 10) + diff.top,
              left: parseInt(editor.css('left'), 10) + diff.left
            });
            mousedown.top = event.pageY;
            mousedown.left = event.pageX;
          }
          throttle = true;
          return setTimeout(function() {
            return throttle = false;
          }, 1000 / 60);
        }
      };
    })(this);
    resize.bind('mousedown', onMousedown);
    return controls.bind('mousedown', onMousedown);
  };

  return Editor;

})(Annotator.Widget);

//# sourceMappingURL=editor.map